version: 0.2

phases:
  install:
    commands:
      # Install dependencies needed for running tests
      - npm install

      # Upgrade AWS CLI to the latest version
      - pip install --upgrade awscli
      - pip install aws-sam-cli
      - pip install --upgrade aws-sam-cli

      # Java
      - mv /bin/sh /bin/sh_tmp && ln -s /bin/bash /bin/sh
      - JAVA_VER=8.0.202-amzn
      - MAVEN_VER=3.5.4
      - SDKMAN_DIR=$HOME/.sdkman
      - curl -s api.sdkman.io | bash
      - sed -i 's/sdkman_auto_answer=false/sdkman_auto_answer=true/' $SDKMAN_DIR/etc/config
      - source $SDKMAN_DIR/bin/sdkman-init.sh && sdk use maven $MAVEN_VER && sdk use java $JAVA_VER
      - rm /bin/sh && mv /bin/sh_tmp /bin/sh

      # Chrome headless
      - sh -c 'wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -' \
        && sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list' \
        && apt-get update -y && apt-get install -y google-chrome-stable
      - apt-get install -y fonts-migmix
      - CHROMEDRIVER_VERSION=`curl -sS chromedriver.storage.googleapis.com/LATEST_RELEASE`
      - curl -SL https://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip -o chromedriver.zip
      - unzip chromedriver.zip -d bin/
      - rm chromedriver.zip

      # Set japanese
      - apt-get install -y language-pack-ja-base language-pack-ja
      - locale-gen ja_JP.UTF-8
  pre_build:
    commands:
      # Discover and run unit tests in the 'tests' directory
      - npm run test:e2e:package
      - npm test
  build:
    commands:
      - sam build
      # Use AWS SAM to package the application using AWS CloudFormation
      - aws cloudformation package --template .aws-sam/build/template.yaml --s3-bucket $S3_BUCKET --output-template template-export.yml

      # Do not remove this statement. This command is required for AWS CodeStar projects.
      # Update the AWS Partition, AWS Region, account ID and project ID in the project ARN on template-configuration.json file so AWS CloudFormation can tag project resources.
      - sed -i.bak 's/\$PARTITION\$/'${PARTITION}'/g;s/\$AWS_REGION\$/'${AWS_REGION}'/g;s/\$ACCOUNT_ID\$/'${ACCOUNT_ID}'/g;s/\$PROJECT_ID\$/'${PROJECT_ID}'/g' template-configuration.json
artifacts:
  type: zip
  files:
    - template-export.yml
    - template-configuration.json
